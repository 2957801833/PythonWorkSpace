"""
面向对象3个特征： 封装、继承、多态

父类的方法不能满足子类的需要的时候--重写
重写：覆盖式重写、扩展式重写
"""

# class Animal:
#     def __init__(self, name):
#         self.name = name
#
# # Person类有两个属性name和age
# # age是子类特有的，父类无法满足
# class Person(Animal):
#     def __init__(self, name, age):
#         # 使用扩展式重写
#         # super(Person, self).__init__(name)
#         super().__init__(name)
#         # self.属性名=值
#         self.age = age


"""
1. 现实生活的例子
    户口本    一个地址，一个户口号
            每一个人一个登记信息，可以有很多人

2. 回顾 前天的知识
    类   属性 和 方法
    通过类来创建对象
    对象调用 属性和方法
    属性和方法 如果在本类内部如何调用呢？  self.属性   self.方法名（）
    属性和方法 如果在本类外部如何调用呢？  对象变量名.属性 对象变量名.方法名（）

    对象属性 和 对象方法
3. 当前这一节的知识

    类 本身 也是一个对象 【Python 万事万物都是对象】
    对象 可以调用 属性和方法

    类 也可以调用 属性和方法 。我们把类调用的属性和方法 称之为 类属性和类方法

    类属性和类方法
    类属性【类属性 不能简称属性  因为我们一提到属性 默认就想到对象属性】
    类属性的特点是 在内存中 只有一份。所有的对象 都共享这一份空间
    例如： 户口本   像 地址和户号是类属性
                登记卡 相当于 对象属性
"""

class Tool():
    # 使用赋值语句，定义类属性，记录创建工具对象的总数
    # 类属性的创建一般是在 类的内部，方法之上
    count = 0
    def __init__(self, name):
        self.name = name
        # 针对类属性做一个计数+1
        Tool.count += 1
# 创建工具对象
tool1 = Tool("斧头")
tool2 = Tool("榔头")
tool3 = Tool("铁锹")
# 知道使用 Tool 类到底创建了多少个对象?
print(f"现在创建了{Tool.count}个工具")