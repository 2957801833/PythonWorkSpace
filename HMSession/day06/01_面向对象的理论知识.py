"""
函数： 把实现了某一个特点功能的代码块封装起来

之前学习的是面向过程  ------------   通过函数的调用 来实现  这个函数 不归属于任何人

现在学习面向对象   -------------   对我们所学习的函数和变量 进行封装
这个封装是更抽象的一个封装 为什么更抽象呢？？？

想想 世间万物 哪些能够 去吃 去睡
人 / 动物     类     归类
{
    def eat()       吃
    def sleep()     睡
}
小狗 吃   小狗 睡
张三 吃    张三 睡

具体的东西     抽象出来
手机 不仅仅是你的手机 所有的手机 应该  有什么函数  有什么变量
{
        变量 name
        函数 play()
        函数 充电（）
}

[归]  类   -------------- 面向对象
面向对象 是更好层次的封装  我们应该站在更高的视野 去看事务的 归 类

面向对象  学习  类  [归类的 公有的特征] [抽象的]
① 面向对象 我们应该 定义 类  [把抽象事务 所具有的 共同的特征 写出来]
② 面向对象 我们定义了类之后，就可以创建具体的对象

我们分析 类的时候  是根据一个具体的对象 分析。
写代码的时候 必须是先定义类，然后才能创建对象。
电脑类：
    变量：  品牌,颜色，电量
    函数：  打开，完成工作，完成学习，打游戏，视频

创建具体的对象


梳理一下学习路径：
面向过程[变量 + 函数]   --> 面向对象 [把变量和函数进行封装]  --> 学习类和对象
要先学习类
以前的变量  ---  属性
以前的函数  ---  方法

类的三要素：
类名： 大驼峰
属性[变量]： 同类事物具备的特征
方法[函数]：同类事物具备的行为

小狗狗
类名：         Dog
属性[变量]：    name,age,color,sex,type等等
方法[函数]：    eat,look_door,cry,drink等等

根据具体的对象 分析出 抽象的类

类名： People/Human
属性[变量]：  name,age,height【身高】
方法[函数]：  run(),eat()

类名： Dog
属性： color, name
方法： cry(), shake()

类名： LoginPage
属性： username,passwrod,code
方法： click(), login()
"""